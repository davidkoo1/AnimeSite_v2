// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication5.Data;

#nullable disable

namespace WebApplication5.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication5.Models.Anime", b =>
                {
                    b.Property<string>("AnimeName")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EditorId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("TitleImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trailer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnimeName");

                    b.HasIndex("EditorId");

                    b.ToTable("Animes");
                });

            modelBuilder.Entity("WebApplication5.Models.AnimeGenre", b =>
                {
                    b.Property<string>("AnimeName")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(0);

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("AnimeName", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("AnimeGenres");
                });

            modelBuilder.Entity("WebApplication5.Models.Comment", b =>
                {
                    b.Property<string>("AnimeName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnimeName", "UserId", "SeasonNumber", "EpisodeNumber");

                    b.HasIndex("UserId");

                    b.HasIndex("AnimeName", "SeasonNumber", "EpisodeNumber");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("WebApplication5.Models.Editor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Editors");
                });

            modelBuilder.Entity("WebApplication5.Models.Episode", b =>
                {
                    b.Property<string>("AnimeName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<string>("EpisodeSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseEpisode")
                        .HasColumnType("datetime2");

                    b.HasKey("AnimeName", "SeasonNumber", "EpisodeNumber");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("WebApplication5.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("WebApplication5.Models.Rating", b =>
                {
                    b.Property<string>("AnimeName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.HasKey("AnimeName", "SeasonNumber", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("WebApplication5.Models.Season", b =>
                {
                    b.Property<string>("AnimeName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<string>("SeasonImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeasonTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnimeName", "SeasonNumber");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("WebApplication5.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApplication5.Models.Anime", b =>
                {
                    b.HasOne("WebApplication5.Models.Editor", "Editor")
                        .WithMany("Animes")
                        .HasForeignKey("EditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Editor");
                });

            modelBuilder.Entity("WebApplication5.Models.AnimeGenre", b =>
                {
                    b.HasOne("WebApplication5.Models.Anime", "Anime")
                        .WithMany("AnimeGenres")
                        .HasForeignKey("AnimeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication5.Models.Genre", "Genre")
                        .WithMany("AnimeGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("WebApplication5.Models.Comment", b =>
                {
                    b.HasOne("WebApplication5.Models.User", "User")
                        .WithMany("Comment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication5.Models.Episode", "Episode")
                        .WithMany("Comments")
                        .HasForeignKey("AnimeName", "SeasonNumber", "EpisodeNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication5.Models.Episode", b =>
                {
                    b.HasOne("WebApplication5.Models.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("AnimeName", "SeasonNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("WebApplication5.Models.Rating", b =>
                {
                    b.HasOne("WebApplication5.Models.User", "User")
                        .WithMany("Rating")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication5.Models.Season", "Season")
                        .WithMany("Ratings")
                        .HasForeignKey("AnimeName", "SeasonNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication5.Models.Season", b =>
                {
                    b.HasOne("WebApplication5.Models.Anime", "Anime")
                        .WithMany("Seasons")
                        .HasForeignKey("AnimeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("WebApplication5.Models.Anime", b =>
                {
                    b.Navigation("AnimeGenres");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("WebApplication5.Models.Editor", b =>
                {
                    b.Navigation("Animes");
                });

            modelBuilder.Entity("WebApplication5.Models.Episode", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("WebApplication5.Models.Genre", b =>
                {
                    b.Navigation("AnimeGenres");
                });

            modelBuilder.Entity("WebApplication5.Models.Season", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("WebApplication5.Models.User", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("Rating");
                });
#pragma warning restore 612, 618
        }
    }
}
